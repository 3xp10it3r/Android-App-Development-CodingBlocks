package com.exploiter.networkingg;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

import com.google.gson.Gson;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Scanner;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

public class MainActivity extends AppCompatActivity {

    public static final String TAG = "MainActi";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        EditText etSearch = findViewById(R.id.etSearch);

        Button btn = findViewById(R.id.btn);

        btn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                String search = etSearch.getText().toString();
                updateText(search);
            }
        });

    }

    private void updateText(String search) {
        String url = "https://api.github.com/search/users?q="+search;
//        NetworkTask networkTask = new NetworkTask();
//        networkTask.execute(url);
        try {
            makeNetworkCall(url);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    void makeNetworkCall(String url) throws IOException {
        OkHttpClient client = new OkHttpClient();

        Request request = new Request.Builder()
                .url(url)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                //SHow Some Toast
            }

            @Override
            public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                String result = response.body().string();

//                ArrayList<GithubUser> users = parseJson(result);

                Gson gson = new Gson();
                ApiResult apiResult = gson.fromJson(result,ApiResult.class);

                GithubUsersAdapter githubUsersAdapter = new GithubUsersAdapter(apiResult.getItems());


                MainActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        RecyclerView recyclerView = findViewById(R.id.rvUsers);
                        recyclerView.setLayoutManager(new LinearLayoutManager(getBaseContext()));
                        recyclerView.setAdapter(githubUsersAdapter);
                    }
                });
            }
        });

    }

    class NetworkTask extends AsyncTask<String,Void,String>{

        @Override
        protected String doInBackground(String... strings) {
            String stringUrl = strings[0];
            try {
                URL url = new URL(stringUrl);
                HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
                InputStream inputStream = httpURLConnection.getInputStream();

                Scanner scanner = new Scanner(inputStream);
                scanner.useDelimiter("\\A");
                if(scanner.hasNext()){
                    String s = scanner.next();
                    return s;
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return "Failed to Load";
        }

        @Override
        protected  void onPostExecute(String s){
            super.onPostExecute(s);
            ArrayList<GithubUser> users = parseJson(s);

            Log.d(TAG, "onPostExecute: "+users.size());
            Log.d(TAG, "onPostExecute: "+users.get(0).getAvatar_url());

            GithubUsersAdapter githubUsersAdapter = new GithubUsersAdapter(users);
            RecyclerView recyclerView = findViewById(R.id.rvUsers);
            recyclerView.setLayoutManager(new LinearLayoutManager(getBaseContext()));
            recyclerView.setAdapter(githubUsersAdapter);


//            TextView textView = findViewById(R.id.textView);
//            textView.setText(s);
        }

    }

    ArrayList<GithubUser> parseJson(String s){
        ArrayList<GithubUser> githubUsers = new ArrayList<>();

        try {
            JSONObject root = null;
            root = new JSONObject(s);
            JSONArray items = root.getJSONArray("items");

            for(int i = 0 ; i < items.length() ; i++){
                JSONObject object = items.getJSONObject(i);
                String login = object.getString("login");
                int id = object.getInt("id");
                String avatar_url  = object.getString("avatar_url");
                Double score  = object.getDouble("score");
                String html_url = object.getString("html_url");

                GithubUser githubUser = new GithubUser(login,id,avatar_url,score,html_url);

                githubUsers.add(githubUser);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return githubUsers;
    }
}